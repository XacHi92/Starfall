--@name rtx_main
--@author Gachi-Purka
--@shared
--@include modules/ui/include.txt
--@include rtx/render/draw.txt
--@include rtx/render/render.txt

--if player() ~= owner() then return end

if CLIENT then
    
    -- GRAPHICS SETTINGS =========================
        
        local resMult = 1
        
        local res = 64 * resMult
        local FOV = 50 * resMult
        local MaxDist = 100
        local perf = 90 -- In percents
        local fxAA = false
        local RTX = true
        local Smoothing = false
        local SmoothMult = 6
        local ShowTime = true
        
    -- RTX ONLY settings =========================
    
        local ray_bounceLeft = 64 -- How many times ray bounce from objects before return
        local ray_samples = 64 -- Count of rays per pexel
        local SkyMul = 1
        local SunMul = 1
        
        local White = 0.7 -- 0.7
        local Exposure = 0.7 -- 0.8
        
    -- SCENE SETTINGS ============================
    
        local LightPos = Vector(20, 30, -30)
        --local CameraPos = Vector(2.5, 4, -3)
        --local CameraAng = Angle(-40, 0, 50)
        
        local CameraPos = Vector(0, 0, -3)
        local CameraAng = Angle(0, 0, 0)
        
        local SunEanable = true
        local SunColor = Color(255, 255, 255)
        
        local Background = Color(128, 204, 230)
        
    -- An table with all objects on scene 


--[[

        local scene_objects = {
            {
                type = "floor",
                color = Color(255, 255, 255),
                mat = "chess"
            },
            {
                type = "sphere",
                pos = Vector(0, 0, 0),
                radius = 1,
                color = Color(255, 255, 0),
                mat = "default"
            }
        }
]]


        


        local scene_objects = { -- RTX Variant
            
--[[
            {
                type = "cube",
                pos = Vector(0, 0, 0),
                size = 1,
                color = Color(255, 0, 0),
                mat = "soft",
                roughnes = 1,
                lightConsum = 0.3,
                colorMul = 1

            },
            
]]
            


            {
                type = "floor",
                color = Color(200),
                mat = "soft",
                roughnes = 1,
                lightConsum = 0.2 -- Reflects 80% of light
            },
--[[
            
            {
                type = "sphere",
                pos = Vector(0, -0.25, 0),
                radius = 0.75,
                color = Color(255, 255, 0),
                mat = "soft",
                roughnes = 1,
                lightConsum = 0.3,
                colorMul = 1

            },
]]





--[[

            {
                type = "sphere",
                pos = Vector(0, 1.75, 0),
                radius = 0.75,
                color = Color(255, 200, 120),
                mat = "lightsource",
                lightPower = 50
            },
            {
                type = "sphere",
                pos = Vector(1.5, -1+0.5, 2),
                radius = 0.25,
                color = Color(200, 140, 255),
                mat = "lightsource",
                roughnes = 1,
                lightPower = 30
            },
            {
                type = "sphere",
                pos = Vector(-1.5, -1+0.5, -2),
                radius = 0.5,
                color = Color(0, 100, 255),
                mat = "lightsource",
                roughnes = 1,
                lightPower = 10
            }

]]







        }



    -- OTHER SETTINGS ============================
    
        local autoStart = true -- Starts render on owner when chip is loaded
    
    -- END USER INPUT ============================
    
--[[
        for j=1, 12 do
            for i=1, 12 do
            local sphere = {
                type = "sphere",
                pos = Vector(-1, 0, 0),
                radius = 1,
                color = Color(255, 255, 0),
                mat = "default"
            }
            
            sphere.pos = Vector((6 - (i-1)) * 2.1, 0, 3 + j * 2.1)
            table.insert(scene_objects, sphere)
            end
        end
]]
        
    
    
    require("modules/ui/include.txt")
    require("rtx/render/draw.txt")
    require("rtx/render/render.txt")
    
    ui.click_key = "key_e"
    
    -- Some useful variables and constants
    
    local HALF_RES = res * 0.5
    local maxPixels = res ^ 2
    local bgExp = -0.0007 * MaxDist
    local showStartScreen = true
    --perf = math.clamp(perf, 0, 80)
    perf = perf / 100
    local maxQuota = quotaMax() * perf

    
    -- Transfer data to scene table
    -- Prosto tak udobnee :P
    
    render_scene.objects = scene_objects
    render_scene.objectsIDs = {}
    render_scene.fov = FOV
    render_scene.bgColor = Background
    render_scene.camPos = CameraPos
    render_scene.camAng = CameraAng
    render_scene.maxDist = MaxDist
    render_scene.lightPos = LightPos
    render_scene.bgExp = bgExp
    render_scene.fxAA = fxAA
    render_scene.res = res
    render_scene.HALF_RES = HALF_RES
    render_scene.sunEnable = SunEnable
    render_scene.sunColor = SunColor
    render_scene.rtx = RTX
    render_scene.raySamples = ray_samples
    render_scene.rayBounceLeft = ray_bounceLeft
    render_scene.ambientCoef = AmbientOclusionCoef
    render_scene.skyMul = SkyMul
    render_scene.sunMul = SunMul
    render_scene.white = White
    render_scene.exposure = Exposure
    smoothMode = Smoothing
    smoothMult = SmoothMult

    
    
    
    
    -- Title screen
    
    hook.add("render", "start_screen", function()
        if showStartScreen == false then return end
        
        render.setColor( Color(40, 40, 45) ) -- background
        render.drawRectFast(0, 0, 512, 512)
        
        render.setColor( Color(200, 200, 200) )
        
        fonts:setTextSize(32)
        render.drawText(32 * 3.5, 75, "типа", TEXT_ALIGN.CENTER)
        
        fonts:setTextSize(128)
        render.drawText(256, 0, "RTX", TEXT_ALIGN.CENTER)
        
        fonts:setTextSize(20)
        render.drawText(256, 110, "Это попытка Хачипрыги создать красивые рендеры.\nНажимая кнопку у Вас может начать лагать,\nибо все вычисления будут производится у ВАС на клиенте.", TEXT_ALIGN.CENTER)
        
        render.setColor( Color(255, 255, 255) )
        
        render.drawSimpleText(64, 180, "Параметры сцены:")
        
        render.drawSimpleText(32, 220, "Разрешение: ".. res .. "x" .. res)
        render.drawSimpleText(32, 240, "FOV: " .. FOV)
        render.drawSimpleText(32, 255, "Нагрузка: ".. perf * 100 .. "%")
        render.drawSimpleText(32, 275, "Кол-во объектов: ".. table.count(scene_objects))
        render.drawSimpleText(32, 295, "Сглаживание: ".. tostring(fxAA))
    end)
    
    local startButton = button(1, 256, 384 + 64, 128 + 64 + 32, 64, "Залагать нахуй!", Color(200, 200, 200), Color(100, 100, 100), Color(100, 100, 100), Color(200, 200, 200))
    startButton.onClick = function()
        showStartScreen = false
        startButton.isShown = false
        
        local counter = 0
        for i, v in pairs(render_scene.objects) do
            if v.id == nil then
                counter = counter + 1
                v.id = counter
                render_scene.objectsIDs.id = v
            end
            --v.color = v.color / 255
        end
        
        local math_clamp = math.clamp
        local startTime = timer.realtime()
        
        startRender(res, perf, function(x, y)
            local uvX = x - HALF_RES
            local uvY = (y - HALF_RES) * -1
            
            local color = render_pixel(uvX, uvY, x, y)
            
            return color
        end)
        
        local stage = 0
        
        hook.add("render", "loadscreen", function()
            render.setRenderTargetTexture("screen")
            local w, h = render.getResolution()
            
            local percent = render_scene.pixels / maxPixels * 100
            percent = math.round(percent)
            
            fonts:setTextSize(32)
            render.drawText( w * 0.5, h * 0.2, "Loadong..." .. " " .. tostring(percent) .. "%", TEXT_ALIGN.CENTER )
            
            if percent == 100 and stage == 0 then stage = 1 render_scene.pixels = 0 end
            if percent == 100 and stage == 1 then print("Rendered in " .. math.round(timer.realtime() - startTime, 4) .. " seconds") hook.remove("render", "loadscreen") end
        end)
        
        
    end
    
    if autoStart and player() == owner() then
        startButton:click()
    end
    
else
    local screen = prop.createComponent(
        chip():getPos() + Vector(0, 0, 60), 
        (owner():getPos() - chip():getPos()):getAngle() * Angle(0, 1, 0) + Angle(90, 0, 0), 
        "starfall_screen", "models/hunter/plates/plate2x2.mdl", 1
    ) 
    screen:linkComponent(chip())
    screen:setCollisionGroup(1)
end