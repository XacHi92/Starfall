render.createRenderTarget("rtscreen")

rendersCounter = 0
local table_insert = table.insert
local coroutine_yield = coroutine.yield
local render_drawRectFast = render.drawRectFast

function rawRender(func, perf, res, cb, startX, endX, startY, endY)
    local quotaM = quotaMax() * perf
    local output = {}
    rendersCounter = rendersCounter + 1
    
    if startX == nil then startX = 0 end
    if startY == nil then startY = 0 end
    if endX == nil then endX = res - 1 end
    if endY == nil then endY = res - 1 end
    
    local paint = coroutine.wrap(function(tbl, f)
        for y=startY, endY do
            for x=startX, endX do
                local n = f(x, y)
                table_insert(tbl, {x, y, n})
                coroutine_yield()
            end
        end
        return true
    end)
    
    hook.add("render","render_castRays" .. rendersCounter,function()
        while quotaAverage()<quotaM do
            if paint(output, func) then
                cb(output)
                paint = function() end
                hook.remove("render","render_castRays" .. rendersCounter)
                return
            end
        end
    end)
end

screen_data = {}

function drawScreen(res, tbl, cb)
    local scale = 1024 / res
    local quotaM = quotaMax() * 0.8
    local paint = coroutine.wrap(function(t)
        for i=1, #t do
            local x, y = t[i][1], t[i][2]
            local color = t[i][3]
            
            if screen_data[y] == nil then screen_data[y] = {} end
            screen_data[y][x] = color
            
            render.setColor( color )
            render_drawRectFast(x * scale, y * scale, scale, scale)
            coroutine_yield()
        end
        return true
    end)
    hook.add("renderoffscreen","render_draw",function()
        render.selectRenderTarget("rtscreen")
        while quotaAverage()<quotaM do
            if paint(tbl) then
                paint = function() end
                pcall(cb)
                hook.remove("renderoffscreen","render_draw")
                return
            end
        end
    end)
    hook.add("render","render_draw",function()
        render.setRenderTargetTexture("rtscreen")
        render.drawTexturedRect(0,0,512,512)
    end)
end


local pattern = {{-1, -1}, {0, -1}, {1, -1}, {-1, 0}, {1, 0}, {-1, 1}, {0, 1}, {1, 1}}
local RES = 64

local function colorDiff(V1,V2)
    return abs(V1-V2):getLength() / 441.67295593006
end

local function smooth(x, y)

    render_scene.pixels = render_scene.pixels + 1
    local pixel = screen_data[y][x]
    local color = Color()
    
    local totalDiff = 0
    local smooth = pixel
    
    for i=1, 8 do
        local xp = pattern[i][1]
        local yp = pattern[i][2]
        local cl = screen_data[math.clamp(y + yp, 0, RES - 1)][math.clamp(x + xp, 0, RES - 1)]
        
        totalDiff = totalDiff + colorDiff(pixel, cl)
        smooth = smooth + cl
    end
    
    totalDiff = totalDiff / 8
    smooth = smooth / 9
    local cl = mixC( smooth, pixel, totalDiff * smoothMult)
    return Color(math.clamp(cl[1], 0, 255), math.clamp(cl[2], 0, 255), math.clamp(cl[3], 0, 255))
end

function startRender(res, perf, renderFunc, callBack, startX, endX, startY, endY)
    RES = res
    local cb2 = function(data) 
        rawRender(smooth, perf, res, function(data) print("Smoothing complited!") drawScreen(res, data) end, startX, endX, startY, endY)
    end
    
    local cb1 = function(data)
        if smoothMode then
            print("Render ended, smoothing...")
            drawScreen(res, data, cb2)
        else
            drawScreen(res, data)
        end
    end
    
    if callBack ~= nil then cb = callBack end
    rawRender(renderFunc, perf, res, cb1, startX, endX, startY, endY)
end