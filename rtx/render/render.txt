--@include rtx/render/materials.txt
require("rtx/render/materials.txt")

EPSILON = 0.0001

render_scene = {
    camPos = Vector(),
    camAng = Angle(),
    fov = 0,
    maxDist = 0,
    lightPos = Vector(),
    bgColor = Color(),
    bgExp = 0,
    shadowSamples = {},
    shadowStep = 0,
    objects = {},
    pixels = 0,
    fxAA = false,
    sunEnabel = true,
    sunColor = Color(255, 255, 120),
    ambientCoef = 10,
    rtx = false,
    skyMul = 1,
    sunMul = 1
}

local math_sign = math.sign
local math_clamp = math.clamp
local math_abs = math.abs
local math_max = math.max
local math_min = math.min
local math_exp = math.exp
local math_sqrt = math.sqrt
local math_approach = math.approach
local table_insert = table.insert

function mixV(v1, v2, x)
    return Vector(
        v1[1] * x + v2[1] * (1-x),
        v1[2] * x + v2[2] * (1-x),
        v1[3] * x + v2[3] * (1-x)
    )
end

function mixC(v1, v2, x)
    return Color(
        v1[1] * x + v2[1] * (1-x),
        v1[2] * x + v2[2] * (1-x),
        v1[3] * x + v2[3] * (1-x)
    )
end


function reflect(rd, normal)
    return rd - 2 * normal:dot(rd) * normal 
end


function stepN(n1, n2)
    if n1 < n2 then return 1 end
    return 0
end


function step(v1, v2)
    return Vector(stepN(v1[1], v2[1]), stepN(v1[2], v2[2]), stepN(v1[3], v2[3])) 
end


function sign(v)
    return Vector(math_sign(v[1]), math_sign(v[2]), math_sign(v[3])) 
end


function abs(v)
    return Vector(math_abs(v[1]), math_abs(v[2]), math_abs(v[3])) 
end


render_OBJfunctions = {
    floor = function(ro, rd)
        local Pl = (-1.0 - ro[2]) / math_clamp(rd[2], -1, 0)
        if Pl < 0 then Pl = -2 end
        return {Pl, Pl, Vector(0, 1, 0)}
    end,
    
    sphere = function(ro, rd, pos, rad)
        local Oc = ro - pos
        local B = Oc:dot(rd)
        local C = Oc:dot(Oc) - rad ^ 2
        local H = B ^ 2 - C
        if H < 0 then return {-2, 0, 0} end
        H = math_sqrt(H)
        SphN = (ro + rd * (-B - H)) - pos
        return {-B - H, -B + H, SphN, rad}    
    end,
    
    cube = function(ro, rd, pos, size)
        ro = ro - pos
        local m = 1 / rd
        local n = m * ro
        local k = abs(m) * size

        local t1 = -n - k
        local t2 = -n + k

        local tN = math_max(t1[1], t1[2], t1[3])
        local tF = math_min(t2[1], t2[2], t2[3])
        if tN > tF or tF < 0 then return {-2, 0, 0} end
        local normal = -sign(rd) * step(Vector(t1[2], t1[3], t1[1]), t1) * step(Vector(t1[3], t1[1], t1[2]), t1)
        
        return {tN, tF, normal, size}
    end
}


function scene(ro, rd, ignored)
    local out = {}
    --printTable(render_scene.objects)
    for i, v in pairs(render_scene.objects) do
        if table.hasValue(ignored, v.id) then continue end
        local t = v.type
        if t == "floor" then
            table_insert(out, {render_OBJfunctions.floor(ro, rd), v})
        elseif t == "sphere" then
            table_insert(out, {render_OBJfunctions.sphere(ro, rd, v.pos, v.radius), v}) 
        elseif t == "cube" then
            table_insert(out, {render_OBJfunctions.cube(ro, rd, v.pos, v.size), v}) 
        end
        
    end
    
    return out
    
end


function rayCast(ro, rd, ...)
    local ignored = { ... }
    local objects = scene(ro, rd, ignored)
    
    local min = 1000000000000
    local object = {{-2, -2, Vector()}, {id = -2}}
    
    for i, obj in pairs(objects) do
        
        local dist = obj[1][1]
        if dist == -2 then continue end
        if dist < min then min = dist object = obj end
        --local color = render_getMaterialColor(ro, rd, v[1][1], v[2], v[3])
    end
    
    return object
    
end


function getAmbientShadow(ro, rd, p, normal, oldRay)
    --p = p + normal * 0.1
    local reflectedRD =  reflect(rd, normal)--:getNormalized()
        
    local reflectedRay = rayCast(p, reflectedRD, oldRay[2].id)
    
    local dist = reflectedRay[1][1]
    if dist ~= -2 and reflectedRay[2].id ~= oldRay[2].id then
        --return dist / render_scene.ambientCoef
        --mixC(color, render_scene.bgColor, math_exp(render_scene.bgExp * (dist * dist) * 0.02))
        local n = math_approach(1, dist / render_scene.ambientCoef, math_exp(dist * dist))
        return math_clamp(n, 0, 1)
    end
    return 1
end



function getSoftShadow(ro, rd, p, lightDire, normal, oldRay)
    
    local newP = ro + rd * (oldRay[1][1] - EPSILON) --+ normal
    
    local ld = (render_scene.lightPos - newP):getNormalized()
    
    local ray = rayCast(newP, ld)
    local dist = ray[1][1]
    local shadow = 1
    
    
    if ray[2].id ~= oldRay[2].id and dist > 0.01 then
        shadow = 0.1
    end
    
    return shadow
    
end


function getLight(ro, rd, ray, p)
    local lightDire = (render_scene.lightPos - p):getNormalized()
    local normal = ray[1][3]
    
    local diffuse = math_clamp(lightDire:dot(normal), 0.01, 1)
    
    local reflected = reflect(rd, normal):getNormalized()
    local specular = math_max(0, reflected:dot(lightDire)) ^ 4
    
    local shadow = 1
    if normal:dot(lightDire) > 0 then
        shadow = getSoftShadow(ro, rd, p, lightDire, normal, ray)
    end
    
    local ambient = getAmbientShadow(ro, rd, p, normal, ray)
    
    return math_clamp((diffuse + specular) * shadow * ambient, 0, 1)
end


function render_calcPixel(ro, rd, ...)
    local ray = rayCast(ro, rd, ...)
    
    local obj = ray[1]
    local objData = ray[2]
    
    local mat = objData.mat
    local cl = objData.color
    local normal = obj[3]
    
    local dist = obj[1]
    
    --printTable(ray)
    if dist > 0 and dist <= render_scene.maxDist and dist ~= -2 then
        
        local p = ro + rd * dist
        local shadow = getLight(ro, rd, ray, p)
        local matsCounter = 0
        
        local color = Color()
        
        if type(mat) == "string" then
            color = render_getMaterialColor(ro, rd, dist, mat, normal, cl, objData.id)
        else
            for k, v in pairs(mat) do
                matsCounter = matsCounter + 1
                local coef = 1
                if objData.matCoefs[matsCounter] ~= nil then coef = objData.matCoefs[matsCounter] end
                color = color + render_getMaterialColor(ro, rd, dist, v, normal, cl, objData.id) * coef
            end
            
            color = color / matsCounter
        end
        
        color = color * shadow
        
        color = mixC(color, render_scene.bgColor, math_exp(render_scene.bgExp * (dist * dist) * 0.02))
        
        return color
    else
        local ld = (render_scene.lightPos - ro):getNormalized()
        local sun = rd:dot(ld) ^ 32
        
        local n = math_max(0.95 * rd[2], 0) / 1.2
        return (((render_scene.bgColor / 255) - Color(n, n, n)) * 255) + render_scene.sunColor * sun
    end
end

local oldLightConsum = 1
local oldDist = 0
local rayFirstHit = false




function render_calcPixelRTX(ro, rd, bounceLimit, rayColor, ...)
    
    if bounceLimit == render_scene.rayBounceLeft then
        rayFirstHit = true
    end
        
    random.seed(rd[1] + math.random(-999, 999), rd[2] + math.random(-999, 999), rd[1] + math.random(-999, 999), rd[2] + math.random(-999, 999))
    
    if bounceLimit <= 0 then
        --return {mixC(rayColor, render_scene.bgColor, math_exp(render_scene.bgExp * (oldDist * oldDist) * 0.02)) * render_scene.skyMul, false}
        return {Color(), false}
    end
    
    local ray = rayCast(ro, rd, ...)
    
    local obj = ray[1]
    local objData = ray[2]
    
    local mat = objData.mat
    local cl = objData.color
    local roughnes = objData.roughnes
    local lightConsum = objData.lightConsum
    local normal = obj[3]
    
    local dist = obj[1]
    
    local ld = (render_scene.lightPos - ro):getNormalized()
    local sun = rd:dot(ld) ^ 16
    
    
    if dist > 0 and dist <= render_scene.maxDist and dist ~= -2 then
        
        local p = ro + rd * dist
        
        if rayFirstHit then
            rayFirstHit = false
            oldDist = dist 
        end
        
        data = render_getMaterialColorRTX(ro, rd, dist, mat, normal, cl, objData.id, roughnes, lightConsum)
        
        local color = data[1]
        local nextRD = data[2]
        
        
        if mat == "glass" then
            if data[3] then
                p = ro + rd * obj[2]
            end
        end
        
        
        if nextRD == Vector() then
            if rayFirstHit then return {cl, true} end
            local color = rayColor + cl * objData.lightPower
            --return {mixC(color, render_scene.bgColor, math_exp(render_scene.bgExp * (oldDist * oldDist) * 0.02)) * render_scene.skyMul, false}
            return {color, false}
        end
        
        color = color-- * math_clamp(ld:dot(normal), 0.01, 1)
        
        local sunColor = render_scene.sunColor * sun * render_scene.sunMul * math_clamp(ld:dot(normal), 0.01, 1)
        color = rayColor + sunColor + color
        
        oldLightConsum = lightConsum
        
        local out = render_calcPixelRTX(p, nextRD, bounceLimit - 1, color, objData.id)
        return {out[1] * lightConsum, out[2]}
    else
        local n = math_max(0.95 * rd[2], 0) / 1.2
        local sunColor = render_scene.sunColor * sun * render_scene.sunMul
        local skyColor = ((((render_scene.bgColor / 255) - Color(n, n, n)) * 255) + sunColor) * render_scene.skyMul
        if bounceLimit == render_scene.rayBounceLeft then return {skyColor, true} end
        
        --local color = (rayColor + skyColor + sunColor) / 3
        local color = rayColor
        
        --return {mixC(color, Color(255, 255, 255), math_exp(render_scene.bgExp * (oldDist * oldDist) * 0.02)), false}
        return {color, false}
    end
end


function render_pixel(x, y, realX, realY)
    
    render_scene.pixels = render_scene.pixels + 1
    
    local outputColor = Color()
    
    
    if not render_scene.fxAA then
        
        local ro = render_scene.camPos
        
        local uvX = realX - render_scene.HALF_RES
        local uvY = realY - render_scene.HALF_RES
        
        local rd = Vector(x + 0.0001, y + 0.0001, render_scene.fov):getNormalized()
        rd:rotate(render_scene.camAng)
        
        local counter = 0
        
        if render_scene.rtx then
            local tempColor = Color(0, 0, 0)
            for i=1, render_scene.raySamples do
                counter = counter + 1
                local out = render_calcPixelRTX(ro, rd, render_scene.rayBounceLeft, render_scene.bgColor)
                tempColor = tempColor + out[1]
                --if counter % 4 then coroutine.yield() end
                coroutine.yield()
                if out[2] then break end
            end
            outputColor = tempColor / counter
        else
            return render_calcPixel(ro, rd)
        end
    else
        local ro = render_scene.camPos
        
        local X = 0.125
        local Y = -0.125
        local Z = 0.375
        local W = -0.375
        
        local uvX = realX - render_scene.HALF_RES
        local uvY = realY - render_scene.HALF_RES
        
        local rd1 = Vector(uvX + X, uvY + Z, render_scene.fov):getNormalized()
        local rd2 = Vector(uvX + W, uvY + X, render_scene.fov):getNormalized()
        local rd3 = Vector(uvX + Y, uvY + W, render_scene.fov):getNormalized()
        local rd4 = Vector(uvX + Z, uvY + Y, render_scene.fov):getNormalized()
        
        local ang = render_scene.camAng
        ang = Angle(ang[1], ang[2], -ang[3])
        
        rd1:rotate(ang)
        rd2:rotate(ang)
        rd3:rotate(ang)
        rd4:rotate(ang)
        
        local outColor = Color()
        
        local bgColor = render_scene.bgColor
        local bdoing = render_scene.rayBounceLeft
        
        if render_scene.rtx then
            local tempColor = Color(0, 0, 0)
            local counter = 0
            for i=1, render_scene.raySamples do
                counter = counter + 1
                local out = render_calcPixelRTX(ro, rd1 * Vector(1, -1, 1), bdoing, bgColor)
                local colAA = out[1] + render_calcPixelRTX(ro, rd2 * Vector(1, -1, 1), bdoing, bgColor)[1] + render_calcPixelRTX(ro, rd3 * Vector(1, -1, 1), bdoing, bgColor)[1] + render_calcPixelRTX(ro, rd4 * Vector(1, -1, 1), bdoing, bgColor)[1]
                tempColor = tempColor + colAA * 0.25
                coroutine.yield()
                if out[2] then break end
            end
            outColor = tempColor / counter
        else
            local colAA = render_calcPixel(ro, rd1 * Vector(1, -1, 1)) + render_calcPixel(ro, rd2 * Vector(1, -1, 1)) + render_calcPixel(ro, rd3 * Vector(1, -1, 1)) + render_calcPixel(ro, rd4 * Vector(1, -1, 1))
            outColor = colAA * 0.25
        end

        outputColor = outColor
    end
    
            
    local colX = (outputColor[1] / 255) ^ 0.45
    local colY = (outputColor[2] / 255) ^ 0.45
    local colZ = (outputColor[3] / 255) ^ 0.45

    
    -- Tone mapping
    
    local white = render_scene.white
    local exposure = render_scene.exposure
    


    colX = colX * white * exposure
    colX = (colX * (1 + colX / white / white)) / (1 + colX)
    
    colY = colY * white * exposure
    colY = (colY * (1 + colY / white / white)) / (1 + colY)
    
    colZ = colZ * white * exposure
    colZ = (colZ * (1 + colZ / white / white)) / (1 + colZ)
    



    local colX = math_clamp(colX * 255, 0, 255)
    local colY = math_clamp(colY * 255, 0, 255)
    local colZ = math_clamp(colZ * 255, 0, 255)

    

    return Color(colX, colY, colZ)
    
    
end












